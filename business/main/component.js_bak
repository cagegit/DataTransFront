/**
 * Created by on 2016/12/13.
 */
let hdrcom = require('../common');
let hdrcfg = require('../../config');

//delete_component
function delete_component(body, res) {
    let group_id = body.request.group;
    let component_id = body.request.component_id;
    let type = body.request.type;

    let checkGroupState = function () {
        return new Promise((resolve,reject)=>{
            hdrcom.pub.getStatus(group_id)
                .done(function (data) {
                    if (data === 'yes') {
                        let buf = hdrcfg.code.EBUSY + ':group is ' + hdrcfg.msg[hdrcfg.code.EBUSY];
                        let msg = {error_code: hdrcfg.code.EBUSY, error_msg: buf};
                        console.info(buf);
                        reject(msg);
                    } else {
                        console.info("delete_component[" + type + "], checkGroupState ok");
                        resolve();
                    }
                });
        });
    };

    let deleComp =async function (db) {//删除comp相关表
        console.info("deleComp[" + type + "] begin");
        let sqlArray = [];
        let params = [component_id];
        if ('capture' === type) {
            sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_COMP_DB_OBJECT_SET + " WHERE SET_ID IN" +
                "(SELECT b.ID FROM " + hdrcfg.cfg.table_name.T_COMP_PARAM + " a, " + hdrcfg.cfg.table_name.T_COMP_DEPEND_SETS + " b " +
                "WHERE a.COMP_ID = ? AND a.PARAM_TYPE = 'EXTERNAL' AND a.PARAM_VALUE = b.ID)");

            sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_CAPTURE_RAC_INFO + " WHERE SET_ID IN" +
                "(SELECT b.ID FROM " + hdrcfg.cfg.table_name.T_COMP_PARAM + " a, " + hdrcfg.cfg.table_name.T_COMP_DEPEND_SETS + " b " +
                "WHERE a.COMP_ID = ? AND a.PARAM_TYPE = 'EXTERNAL' AND a.PARAM_VALUE = b.ID)");

            sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_COMP_DEPEND_SETS + " WHERE ID IN" +
                "(SELECT PARAM_VALUE FROM " + hdrcfg.cfg.table_name.T_COMP_PARAM +
                " WHERE COMP_ID = ? AND PARAM_TYPE = 'EXTERNAL')");

        }else if ( 'apply' === type){
            sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_COMP_DB_OBJECT_SET + " WHERE SET_ID IN" +
                "(SELECT b.ID FROM " + hdrcfg.cfg.table_name.T_COMP_PARAM + " a, " + hdrcfg.cfg.table_name.T_COMP_DEPEND_SETS + " b " +
                "WHERE a.COMP_ID = ? AND a.PARAM_TYPE = 'EXTERNAL' AND a.PARAM_VALUE = b.ID)");

            sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_COMP_DEPEND_SETS + " WHERE ID IN" +
                "(SELECT PARAM_VALUE FROM " +hdrcfg.cfg.table_name.T_COMP_PARAM +
                " WHERE COMP_ID = ? AND PARAM_TYPE = 'EXTERNAL')");

            sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_WEB_CACHE + " WHERE COMP_ID IN" +
                "(SELECT ID FROM " + hdrcfg.cfg.table_name.T_COMP_INFO +
                " WHERE ID = ?)");
        }
        else if ('queue' === type) {
            sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_QUEUE_BPOINT + " WHERE QUEUE_ID = ?");
            sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_QUEUE_PKG + " WHERE QUEUE_ID = ?");
            sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_QUEUE_STATIS + " WHERE QUEUE_ID = ?");
        }

        if ('queue' === type || 'database' === type){
            sqlArray.push("UPDATE " + hdrcfg.cfg.table_name.T_COMP_PARAM + " SET PARAM_VALUE='' WHERE PARAM_VALUE = ?");
        }

        sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_COMP_PARAM + " WHERE COMP_ID = ?");
        sqlArray.push("DELETE FROM " + hdrcfg.cfg.table_name.T_COMP_INFO + " WHERE ID = ?");
        let jobs=[];
        for (let y = 0; y < sqlArray.length; y++) {
            console.info(sqlArray[y]);
            let rs = hdrcom.db.preSql(db, sqlArray[y], params);
            jobs.push(rs);
        }
        console.info("deleComp [" + type + "] ok");
        await Promise.all(jobs).catch(err=>{
            console.error(err);
            throw new Error(err);
        });
        return 'SUCCESS';
    };

    let delFile = function () {
        let dir = [hdrcfg.cfg.macro.MN_DIR_DATA
            //hdrcfg.cfg.macro.MN_DIR_LOG,
            //hdrcfg.cfg.macro.MN_DIR_DICT,
            //hdrcfg.cfg.macro.MN_DIR_SKIPSQL,
            //hdrcfg.cfg.macro.MN_DIR_ERRSQL,
            //hdrcfg.cfg.macro.MN_DIR_SYNC,
            //hdrcfg.cfg.macro.MN_DIR_ETC
        ];
        let stmt='';
        if ('capture' === type || 'transfer' === type)
            stmt = 'rm -rf ' + process.env['DIP_HOME'] + '/' + dir[0] + '/' + group_id + '/' + component_id + '.bkp';
        else if ('queue' === type) {
            stmt = 'rm -rf ' + process.env['DIP_HOME'] + '/' + dir[0] + '/' + group_id + '/' + component_id + '.ctl ' + component_id + '_[0-9]*.log';
        }else if ('apply' === type){
            stmt = 'rm -rf ' + process.env['DIP_HOME'] + '/' + dir[0] + '/' + group_id + '/' + component_id + '.bkp ' + process.env['DIP_HOME'] + '/etc/' + group_id + '/' + 'apply_' + component_id + ".xml";
            console.info(stmt);
        }
        hdrcom.pub.exe_shell(stmt);
    };

    let doJob=async function () {
        let db;
        try{
            await hdrcom.pub.checkMd5(body);
            await checkGroupState();
            db =await hdrcom.db.openDb();
            console.info("delete_component[" + type + "], conn db ok.");
            await hdrcom.pub.setAutoCommit(db);
            await hdrcom.db.dbTransaction(db);
            let result=await deleComp(db);
            await hdrcom.db.dbCommit(db);
            //删除文件
            if (type !== 'database'){
                delFile();
            }
            hdrcom.pub.processResult(res, result, true, body);
            console.info("end delete_component db.");
        }catch(err){
            db && await hdrcom.db.dbRollback(db).catch(err=>{
                console.error(err);
            });
            hdrcom.pub.processResult(res, err, false, body);
        }finally {
            db && hdrcom.db.closeDB(db);
        }
    };
    doJob();
}

//导出对象
module.exports =  {
    delete_component: delete_component
};