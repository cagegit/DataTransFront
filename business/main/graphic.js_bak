/**
 * Created by on 2016/12/13.
 */
var hdrcom = require('../common');
var hdrcfg = require('../../config');

var Q = require("q");
var async = require('async');
var db = require('odbc');
var moment = require('moment');
var md5 = require('md5');

//var mysqlCn = hdrcfg.cfg.mysql_connstr.connstr;
var mysqlCn = hdrcom.pub.getDipMysqlConn();

/*
 * ##############以下为调用graphic相关方法######################
 */

//保存graphic
function add_graphic(body, res) {
//1、解析relation_shape, param表中存在更新，否则插入
//2、解析line_obj和content，comp表，存在更新，否则(生成id)插入

    //打开数据库，并开启事务
    var db = hdrcom.db.openDBSync(mysqlCn);
    if (db.error) {
        var buf = hdrcfg.code.EDBOPEN + ':' + hdrcfg.msg[hdrcfg.code.EDBOPEN];
        var msg = {error_code: hdrcfg.code.EDBOPEN, error_msg: buf};
        hdrcom.log.error(buf);
        //res.json(hdrcom.pub.processResult(msg, false));
        hdrcom.pub.processResult(res, msg, false, body);
        return;
    }
    hdrcom.log.info("[add_graphic], conn db ok.");

    var group = body.request.group;

    async.waterfall([
        function (callback) {
            hdrcom.log.info("check md5...");
            if (body.md5 === md5(JSON.stringify(body.request))) {
                callback(null);
            }
            else {
                var buf = hdrcfg.code.EMD5 + ':' + hdrcfg.msg[hdrcfg.code.EMD5];
                var msg = {error_code: hdrcfg.code.EMD5, error_msg: buf};
                hdrcom.log.error(buf);
                callback(msg);
                return;
            }
        },
        function (callback) {

            if (!hdrcom.pub.setAutoCommit(db)) {
                var buf = hdrcfg.code.EAUTOCOMMIT + ':' + hdrcfg.msg[hdrcfg.code.EAUTOCOMMIT];
                var msg = {error_code: hdrcfg.code.EAUTOCOMMIT, error_msg: buf};
                hdrcom.log.error(buf);
                callback(msg);
                return;
            }

            hdrcom.log.info("set autocommit = 0, ok.");

            var bt = hdrcom.db.beginTransactionSync(db);
            if (bt.error) {
                var buf = hdrcfg.code.EBTRAN + ':' + hdrcfg.msg[hdrcfg.code.EBTRAN];
                var msg = {error_code: hdrcfg.code.EBTRAN, error_msg: buf};
                hdrcom.log.error(buf);
                hdrcom.pub.processResult(res, msg, false, body);
                return;
            }
            hdrcom.log.info("begin transaction, ok.");

            hdrcom.log.info("begin deal relationShape.");

            var relationShap = body.request.relation_shape;
            if (relationShap) {
                var captureObj = relationShap.capture;
                var applyObj = relationShap.apply;
                var transObj = relationShap.transfer;
                var etlObj = relationShap.etlapply;
                var ftpObj = relationShap.transftp;

                if (captureObj && captureObj.length > 0) {
                    for (var x = 0; x < captureObj.length; x++) {
                        hdrcom.log.info("begin to deal capture`s param.");
                        var capId = captureObj[x].rid;
                        //source_db、analysis_db
                        var params = "";
                        var dbId = "";
                        var quId = "";
                        /*
                        if (captureObj[x].database)
                            dbId = captureObj[x].database.rid;
                        if (captureObj[x].queue)
                            quId = captureObj[x].queue.rid;
                         */
                        var siblings = captureObj[x].siblings;
                        for (var ss=0; ss<siblings.length; ss++){
                            if (siblings[ss].type == 'database')
                                dbId = siblings[ss].rid;
                            if (siblings[ss].type == 'queue')
                                quId = siblings[ss].rid;
                        }

                        if (capId && dbId && quId) {
                            params = ['source_db', 'analysis_db', 'output_queue'];
                        } else if (capId && dbId && !quId) {
                            params = ['source_db', 'analysis_db'];
                        } else if (capId && !dbId && quId) {
                            params = ['output_queue'];
                        } else {
                            params = [];
                        }

                        if (capId && capId != 'undefined') {
                            for (var i = 0; i < params.length; i++) {
                                var sql = 'select COMP_ID from ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' where COMP_ID = ? and PARAM_NAME = ?';
                                var para = [capId, params[i]];
                                var rs = hdrcom.db.executeSqlSync(db, sql, para);
                                if (rs.error) {
                                    var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                    var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                    hdrcom.log.error(buf);
                                    //hdrcom.db.rollbackTransactionSync(db);
                                    callback(msg);
                                    return;
                                }

                                var time = moment().format('YYYY-MM-DD HH:mm:ss');
                                if (rs.length > 0) {//已经存在, to update
                                    hdrcom.log.info('[' + capId + ']`s param:[' + params[i] + '] is exist, to update');

                                    var sqlUpd = 'update ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' set PARAM_VALUE = ?, UPDATE_TIME = ? where COMP_ID = ? and PARAM_NAME = ?';
                                    var paraUpd = "";
                                    if (params[i] == 'output_queue') {
                                        paraUpd = [quId, time, capId, params[i]];
                                    } else {
                                        paraUpd = [dbId, time, capId, params[i]];
                                    }

                                    var rsUpd = hdrcom.db.executeSqlSync(db, sqlUpd, paraUpd);
                                    if (rsUpd.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                } else {//不存在, to insert
                                    hdrcom.log.info('[' + capId + ']`s param:[' + params[i] + '] is not exist, to insert');

                                    var sqlIns = 'insert into ' + hdrcfg.cfg.table_name.T_COMP_PARAM + '(COMP_ID, PARAM_NAME, PARAM_VALUE, PARAM_TYPE, VALID, INSERT_TIME) values (?, ?, ?, ?, ?, ?)';
                                    var paraIns = "";
                                    if (params[i] == 'output_queue') {
                                        paraIns = [capId, params[i], quId, 'NORMAL', 'YES', time];
                                    } else {
                                        paraIns = [capId, params[i], dbId, 'NORMAL', 'YES', time];
                                    }

                                    var rsIns = hdrcom.db.executeSqlSync(db, sqlIns, paraIns);
                                    if (rsIns.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                }
                            }
                        }

                        hdrcom.log.info("end to deal capture`s params.");
                    }
                } else {
                    hdrcom.log.info("relationShape`s cap is null");
                }

                if (applyObj && applyObj.length > 0) {
                    for (var x = 0; x < applyObj.length; x++) {
                        hdrcom.log.info("begin to deal apply`s params.");
                        var apId = applyObj[x].rid;
                        //source_db、target_db, input_queue
                        var params = "";
                        var dbtId = "";
                        var quId = "";

                        var dbsId = "";
/*
                        if (captureObj) {
                            if (captureObj[0].database)
                                dbsId = captureObj[0].database.rid;
                        }

                        if (transObj){
                            if (transObj[0].database)
                                dbsId = transObj[0].database.rid;
                        }

                        if (applyObj[x].database)
                            dbtId = applyObj[x].database.rid;

                        if (applyObj[x].queue)
                            quId = applyObj[x].queue.rid;
*/
                        if (captureObj){
                            for (var ss = 0; ss<captureObj[0].siblings.length; ss++){
                                if (captureObj[0].siblings[ss].type == 'database'){
                                    dbsId = captureObj[0].siblings[ss].rid;
                                }
                            }
                        } else if (transObj) {
                            for (var ss1 = 0; ss1 < transObj[0].siblings.length; ss1++) {
                                if (transObj[0].siblings[ss1].type == 'database') {
                                    dbsId = transObj[0].siblings[ss1].rid;
                                }
                            }
                        } else if (ftpObj) {
                            for (var ss1 = 0; ss1 < ftpObj[0].siblings.length; ss1++) {
                                if (ftpObj[0].siblings[ss1].type == 'database') {
                                    dbsId = ftpObj[0].siblings[ss1].rid;
                                }
                            }
                        }

                        var siblings = applyObj[x].siblings;
                        for (var ss2=0; ss2<siblings.length; ss2++){
                            if (siblings[ss2].type == 'database')
                                dbtId = siblings[ss2].rid;
                            if (siblings[ss2].type == 'queue')
                                quId = siblings[ss2].rid;
                        }

                        if (apId && dbsId && dbtId && quId) {
                            params = ['source_db', 'target_db', 'input_queue'];
                        } else if (apId && !dbsId && dbtId && quId) {
                            params = ['target_db', 'input_queue'];
                        } else {
                            params = [];
                        }

                        if (apId && apId != 'undefined') {
                            for (var i = 0; i < params.length; i++) {
                                var sql = 'select COMP_ID from ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' where COMP_ID = ? and PARAM_NAME = ?';
                                var para = [apId, params[i]];
                                var rs = hdrcom.db.executeSqlSync(db, sql, para);
                                if (rs.error) {
                                    var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                    var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                    hdrcom.log.error(buf);
                                    //hdrcom.db.rollbackTransactionSync(db);
                                    callback(msg);
                                    return;
                                }

                                var time = moment().format('YYYY-MM-DD HH:mm:ss');

                                if (rs.length > 0) {//已经存在, to update
                                    hdrcom.log.info('[' + apId + ']`s param:[' + params[i] + '] is exist, to update');

                                    var sqlUpd = 'update ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' set PARAM_VALUE = ?, UPDATE_TIME = ? where COMP_ID = ? and PARAM_NAME = ?';
                                    var paraUpd = "";
                                    if (params[i] == 'input_queue') {
                                        paraUpd = [quId, time, apId, params[i]];
                                    } else if (params[i] == 'source_db') {
                                        paraUpd = [dbsId, time, apId, params[i]];
                                    } else {
                                        paraUpd = [dbtId, time, apId, params[i]];
                                    }

                                    var rsUpd = hdrcom.db.executeSqlSync(db, sqlUpd, paraUpd);
                                    if (rsUpd.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                } else {//不存在, to insert
                                    hdrcom.log.info('[' + apId + ']`s param:[' + params[i] + '] is not exist, to insert');

                                    var sqlIns = 'insert into ' + hdrcfg.cfg.table_name.T_COMP_PARAM + '(COMP_ID, PARAM_NAME, PARAM_VALUE, PARAM_TYPE, VALID, INSERT_TIME) values (?, ?, ?, ?, ?, ?)';
                                    var paraIns = "";
                                    if (params[i] == 'input_queue') {
                                        paraIns = [apId, params[i], quId, 'NORMAL', 'YES', time];
                                    } else if (params[i] == 'source_db') {
                                        paraIns = [apId, params[i], dbsId, 'NORMAL', 'YES', time];
                                    } else {
                                        paraIns = [apId, params[i], dbtId, 'NORMAL', 'YES', time];
                                    }

                                    var rsIns = hdrcom.db.executeSqlSync(db, sqlIns, paraIns);
                                    if (rsIns.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                }
                            }

                            //dbsId ,dbtid
                            if (dbsId != dbtId){
                                var sqlDB = 'select PARAM_VALUE from ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' where COMP_ID in(?, ?) and PARAM_NAME = ?';
                                var paraDB = [dbsId, dbtId, 'db_type'];

                                var rsDB = hdrcom.db.executeSqlSync(db, sqlDB, paraDB);
                                if (rsDB.error) {
                                    var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                    var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                    hdrcom.log.error(buf);
                                    hdrcom.db.rollbackTransactionSync(db);
                                    callback(msg);
                                    return;
                                }

                                var program = "";
                                if (rsDB.length == 2 && rsDB[0].PARAM_VALUE == rsDB[1].PARAM_VALUE){
                                    hdrcom.log.info("db type is same.");
                                    if (rsDB[0].PARAM_VALUE == 'oracle') {
                                        program = 'dip_oraloader';
                                    } else if (rsDB[0].PARAM_VALUE == 'sqlserver') {
                                        program = 'dip_mssloader';
                                    } else if (rsDB[0].PARAM_VALUE == 'mysql') {
                                        program = 'dip_mysqlloader';
                                    } else if (rsDB[0].PARAM_VALUE == 'db2'){
                                        program = 'dip_db2loader';
                                    }
                                }else{
                                    program = 'dip_com_loader';

                                    var sqlD = "delete from "+hdrcfg.cfg.table_name.T_COMP_PARAM+ " where COMP_ID = ? and PARAM_NAME IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                                    var paramD = [apId, 'lob_skip', 'source_clob_charset', 'source_nclob_charset', 'source_metadata_charset', 'source_nchar_charset', 'dip_nchar_charset', 'db_is_utf8', 'idle_connect_seconds', 'clob_bind_size', 'set_tag', 'skip_large_char', 'db_timeout'];

                                    var rsD = hdrcom.db.executeSqlSync(db, sqlD, paramD);
                                    if (rsD.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                }
                                var sqlU = "update "+hdrcfg.cfg.table_name.T_COMP_INFO+ " set PROGRAM = ? where id = ?";
                                var paramU = [program, apId];

                                var rsU = hdrcom.db.executeSqlSync(db, sqlU, paramU);
                                if (rsU.error) {
                                    var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                    var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                    hdrcom.log.error(buf);
                                    hdrcom.db.rollbackTransactionSync(db);
                                    callback(msg);
                                    return;
                                }
                            }
                        }

                        hdrcom.log.info("end to deal apply`s params.");
                    }
                } else {
                    hdrcom.log.info("relationShape`s apply is null");
                }

                if (transObj && transObj.length > 0) {
                    for (var x = 0; x < transObj.length; x++) {
                        var tsId = transObj[x].rid;
                        //source_db、target_db, input_queue
                        var params = "";
                        var dbsId = "";
                        var quId = "";
                        /*
                        if (transObj[x].database)
                            dbsId = transObj[x].database.rid;
                        if (transObj[x].queue)
                            quId = transObj[x].queue.rid;
                        */
                        var siblings = transObj[x].siblings;
                        for (var ss=0; ss<siblings.length; ss++){
                            if (siblings[ss].type == 'database')
                                dbsId = siblings[ss].rid;
                            if (siblings[ss].type == 'queue')
                                quId = siblings[ss].rid;
                        }

                        if (tsId && dbsId && quId) {
                            params = ['source_db', 'output_queue'];
                        } else if (tsId && dbsId && !quId){
                            params = ['source_db'];
                        } else if (tsId && !dbsId && quId){
                            params = ['output_queue'];
                        }
                        else {
                            params = [];
                        }

                        if (tsId && tsId != 'undefined') {
                            for (var i = 0; i < params.length; i++) {
                                var sql = 'select COMP_ID from ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' where COMP_ID = ? and PARAM_NAME = ?';
                                var para = [tsId, params[i]];
                                var rs = hdrcom.db.executeSqlSync(db, sql, para);
                                if (rs.error) {
                                    var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                    var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                    hdrcom.log.error(buf);
                                    //hdrcom.db.rollbackTransactionSync(db);
                                    callback(msg);
                                    return;
                                }

                                var time = moment().format('YYYY-MM-DD HH:mm:ss');

                                if (rs.length > 0) {//已经存在, to update
                                    hdrcom.log.info('[' + tsId + ']`s param:[' + params[i] + '] is exist, to update');

                                    var sqlUpd = 'update ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' set PARAM_VALUE = ?, UPDATE_TIME = ? where COMP_ID = ? and PARAM_NAME = ?';
                                    var paraUpd = "";
                                    if (params[i] == 'output_queue') {
                                        paraUpd = [quId, time, tsId, params[i]];
                                    } else if (params[i] == 'source_db') {
                                        paraUpd = [dbsId, time, tsId, params[i]];
                                    }

                                    var rsUpd = hdrcom.db.executeSqlSync(db, sqlUpd, paraUpd);
                                    if (rsUpd.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                } else {//不存在, to insert
                                    hdrcom.log.info('[' + tsId + ']`s param:[' + params[i] + '] is not exist, to insert');

                                    var sqlIns = 'insert into ' + hdrcfg.cfg.table_name.T_COMP_PARAM + '(COMP_ID, PARAM_NAME, PARAM_VALUE, PARAM_TYPE, VALID, INSERT_TIME) values (?, ?, ?, ?, ?, ?)';
                                    var paraIns = "";
                                    if (params[i] == 'output_queue') {
                                        paraIns = [tsId, params[i], quId, 'NORMAL', 'YES', time];
                                    } else if (params[i] == 'source_db') {
                                        paraIns = [tsId, params[i], dbsId, 'NORMAL', 'YES', time];
                                    }

                                    var rsIns = hdrcom.db.executeSqlSync(db, sqlIns, paraIns);
                                    if (rsIns.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                }
                            }
                        }
                        hdrcom.log.info("end to deal transfer`s params.");
                    }
                } else {
                    hdrcom.log.info("relationShape`s transfer is null");
                }

                if (ftpObj && ftpObj.length > 0) {
                    var inQue = '';
                    var outQue = '';
                    for (var x = 0; x < ftpObj.length; x++) {
                        var tsId = ftpObj[x].rid;
                        //source_db、target_db, input_queue
                        var params = [];
                        var siblings = ftpObj[x].siblings;
                        for (var i = 0; i < siblings.length; i++) {
                            if (siblings[i].type == 'queue' && siblings[i].io_status == 'input') {
                                inQue = siblings[i].rid;
                                params.push('input_queue');
                            } else if (siblings[i].type == 'queue' && siblings[i].io_status == 'output') {
                                outQue = siblings[i].rid;
                                params.push('output_queue');
                            }
                        }
                        if (tsId && tsId != 'undefined') {
                            for (var i = 0; i < params.length; i++) {
                                var sql = 'select COMP_ID from ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' where COMP_ID = ? and PARAM_NAME = ?';
                                var para = [tsId, params[i]];
                                var rs = hdrcom.db.executeSqlSync(db, sql, para);
                                if (rs.error) {
                                    var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                    var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                    hdrcom.log.error(buf);
                                    callback(msg);
                                    return;
                                }
                                var time = moment().format('YYYY-MM-DD HH:mm:ss');
                                if (rs.length > 0) {//已经存在, to update
                                    hdrcom.log.info('[' + tsId + ']`s param:[' + params[i] + '] is exist, to update');
                                    var sqlUpd = 'update ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' set PARAM_VALUE = ?, UPDATE_TIME = ? where COMP_ID = ? and PARAM_NAME = ?';
                                    var paraUpd = "";
                                    if (params[i] == 'output_queue') {
                                        paraUpd = [outQue, time, tsId, params[i]];
                                    } else if (params[i] == 'input_queue') {
                                        paraUpd = [inQue, time, tsId, params[i]];
                                    }
                                    var rsUpd = hdrcom.db.executeSqlSync(db, sqlUpd, paraUpd);
                                    if (rsUpd.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                } else {//不存在, to insert
                                    hdrcom.log.info('[' + tsId + ']`s param:[' + params[i] + '] is not exist, to insert');
                                    var sqlIns = 'insert into ' + hdrcfg.cfg.table_name.T_COMP_PARAM + '(COMP_ID, PARAM_NAME, PARAM_VALUE, PARAM_TYPE, VALID, INSERT_TIME) values (?, ?, ?, ?, ?, ?)';
                                    var paraIns = "";
                                    if (params[i] == 'output_queue') {
                                        paraIns = [tsId, params[i], outQue, 'NORMAL', 'YES', time];
                                    } else if (params[i] == 'input_queue') {
                                        paraIns = [tsId, params[i], inQue, 'NORMAL', 'YES', time];
                                    }
                                    var rsIns = hdrcom.db.executeSqlSync(db, sqlIns, paraIns);
                                    if (rsIns.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                }
                            }
                        }
                        hdrcom.log.info("end to deal transftp`s params.");
                    }
                } else {
                    hdrcom.log.info("relationShape`s transftp is null");
                }
                if (etlObj && etlObj.length > 0) {
                    for (var x = 0; x < etlObj.length; x++) {
                        hdrcom.log.info("begin to deal etl`s params.");
                        var etlId = etlObj[x].rid;
                        //source_db、input_queue、output_queue
                        var params = "";

                        var dbsId = "";
/*
                        if (captureObj) {
                            if (captureObj[0].database)
                                dbsId = captureObj[0].database.rid;
                        }
*/
                        var inputQ = "";
                        var outputQ = "";
/*
                        if (etlObj[x].queue){
                            var queueLen = etlObj[x].queue.length;
                            for (var y=0; y<queueLen; y++){
                                if (etlObj[x].queue[y].io_status == 'input')
                                    inputQ = etlObj[x].queue[y].rid;
                                else if (etlObj[x].queue[y].io_status == 'output')
                                    outputQ = etlObj[x].queue[y].rid;
                            }
                        }
*/
                        if (captureObj){
                            for (var ss = 0; ss<captureObj[0].siblings.length; ss++){
                                if (captureObj[0].siblings[ss].type == 'database'){
                                    dbsId = captureObj[0].siblings[ss].rid;
                                }
                            }
                        }
                        if (transObj){
                            for (var ss1 = 0; ss1<transObj[0].siblings.length; ss1++){
                                if (transObj[0].siblings[ss1].type == 'database'){
                                    dbsId = transObj[0].siblings[ss1].rid;
                                }
                            }
                        }

                        var siblings = etlObj[x].siblings;
                        for (var ss2=0; ss2<siblings.length; ss2++){
                            if (siblings[ss2].type == 'queue' && siblings[ss2].io_status == 'input')
                                inputQ = siblings[ss2].rid;
                            if (siblings[ss2].type == 'queue' && siblings[ss2].io_status == 'output')
                                outputQ = siblings[ss2].rid;
                        }

                        if (etlId && dbsId && inputQ && outputQ) {
                            params = ['source_db', 'input_queue', 'output_queue'];
                        } else{
                            params = [];
                        }

                        if (etlId && etlId != 'undefined') {
                            for (var i = 0; i < params.length; i++) {
                                var sql = 'select COMP_ID from ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' where COMP_ID = ? and PARAM_NAME = ?';
                                var para = [etlId, params[i]];
                                var rs = hdrcom.db.executeSqlSync(db, sql, para);
                                if (rs.error) {
                                    var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                    var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                    hdrcom.log.error(buf);
                                    //hdrcom.db.rollbackTransactionSync(db);
                                    callback(msg);
                                    return;
                                }

                                var time = moment().format('YYYY-MM-DD HH:mm:ss');

                                if (rs.length > 0) {//已经存在, to update
                                    hdrcom.log.info('[' + etlId + ']`s param:[' + params[i] + '] is exist, to update');

                                    var sqlUpd = 'update ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' set PARAM_VALUE = ?, UPDATE_TIME = ? where COMP_ID = ? and PARAM_NAME = ?';
                                    var paraUpd = "";
                                    if (params[i] == 'input_queue') {
                                        paraUpd = [inputQ, time, etlId, params[i]];
                                    } else if (params[i] == 'output_queue') {
                                        paraUpd = [outputQ, time, etlId, params[i]];
                                    } else if (params[i] == 'source_db') {
                                        paraUpd = [dbsId, time, etlId, params[i]];
                                    }

                                    var rsUpd = hdrcom.db.executeSqlSync(db, sqlUpd, paraUpd);
                                    if (rsUpd.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                } else {//不存在, to insert
                                    hdrcom.log.info('[' + etlId + ']`s param:[' + params[i] + '] is not exist, to insert');

                                    var sqlIns = 'insert into ' + hdrcfg.cfg.table_name.T_COMP_PARAM + '(COMP_ID, PARAM_NAME, PARAM_VALUE, PARAM_TYPE, VALID, INSERT_TIME) values (?, ?, ?, ?, ?, ?)';
                                    var paraIns = "";
                                    if (params[i] == 'input_queue') {
                                        paraIns = [etlId, params[i], inputQ, 'NORMAL', 'YES', time];
                                    } else if (params[i] == 'output_queue') {
                                        paraIns = [etlId, params[i], outputQ, 'NORMAL', 'YES', time];
                                    } else if (params[i] == 'source_db') {
                                        paraIns = [etlId, params[i], dbsId, 'NORMAL', 'YES', time];
                                    }

                                    var rsIns = hdrcom.db.executeSqlSync(db, sqlIns, paraIns);
                                    if (rsIns.error) {
                                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                                        hdrcom.log.error(buf);
                                        hdrcom.db.rollbackTransactionSync(db);
                                        callback(msg);
                                        return;
                                    }
                                }
                            }
                        }

                        hdrcom.log.info("end to deal etl`s params.");
                    }
                } else {
                    hdrcom.log.info("relationShape`s etl is null");
                }

            } else {
                hdrcom.log.info("relationShape is null");
            }

            hdrcom.log.info("end deal relationShape.");

            callback(null);
        },
        function (callback) {
            hdrcom.log.info("begin to save line & content info");
            var index = body.request.graphic.global_index;
            var line_object = body.request.graphic.line_object;
            var content = body.request.graphic.graphic_content;

            var lineObject1 = JSON.stringify(line_object);
            var content1 = JSON.stringify(content);

            //line信息存在则更新，不存在插入。
            var sqlQuery = 'select group_id from ' + hdrcfg.cfg.table_name.T_COMP_RELATION + ' where GROUP_ID = ?';
            var paramsQuery = [group];

            var rs = hdrcom.db.executeSqlSync(db, sqlQuery, paramsQuery);

            if (rs.error) {
                var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                hdrcom.log.error(buf);
                hdrcom.db.rollbackTransactionSync(db);
                callback(msg);
                return;
            } else {
                if (rs.length > 0) {//update
                    hdrcom.log.info("the group line is exist, to update");

                    var sqlUpd = 'update ' + hdrcfg.cfg.table_name.T_COMP_RELATION + ' set IDX = ?, LINE = ?, CONTENT = ? where GROUP_ID = ?';
                    var paramsUpd = [index, lineObject1, content1, group];
                    var rsupd = hdrcom.db.executeSqlSync(db, sqlUpd, paramsUpd);

                    if (rsupd.error) {
                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                        hdrcom.log.error(buf);
                        hdrcom.db.rollbackTransactionSync(db);
                        callback(msg);
                        return;
                    }
                } else {//insert
                    hdrcom.log.info("the group line_info is not exist, to insert");
                    var sqlIns = 'insert into ' + hdrcfg.cfg.table_name.T_COMP_RELATION + '(GROUP_ID, IDX, LINE, CONTENT) values (?, ?, ?, ?)';
                    var paramsIns = [group, index, lineObject1, content1];

                    var rsIns = hdrcom.db.executeSqlSync(db, sqlIns, paramsIns);

                    if (rsIns.error) {
                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                        hdrcom.log.error(buf);
                        hdrcom.db.rollbackTransactionSync(db);
                        callback(msg);
                        return;
                    }
                }
            }
            hdrcom.log.info("end to save line info");
            callback(null);
        },
        function (callback) {
            hdrcom.log.info("begin to deal comp.");

            //var group = body.request.graphic.group;
            var line_object = body.request.graphic.line_object;
            var graphic_content = body.request.graphic.graphic_content;

            //var RealIdArray = [];
            //遍历graphic_content
            for (var i = 0; i < graphic_content.length; i++) {
                //var BlockId = graphic_content[i].BlockId;
                var RealId = graphic_content[i].RealId;
/*
                var program = "";
                var Rtype = graphic_content[i].Rtype;
                var Type = graphic_content[i].Type;
                var type = "";

                if (Rtype == 'database') {
                    type = 'DB';
                } else if (Rtype == 'capture') {
                    type = 'ORA_CAPTURE';
                    program = 'dip_oracapture';
                } else if (Rtype == 'queue') {
                    type = 'QUEUE';
                } else if (Rtype == 'apply') {
                    type = 'ORA_LOADER';
                    program = 'dip_oraloader';
                } else if (Rtype == 'transfer') {
                    type = 'TCLIENT';
                    program = 'dip_tclient';
                }
*/
                //求出pre_id, suf_id
                var preId = "";
                var sufId = "";
                for (var j = 0; j < line_object.length; j++) {
                    var sId = line_object[j].RealSourceId;
                    var tId = line_object[j].RealTargetId;

                    if (RealId == sId) {
                        sufId = sufId + tId + '#';
                    } else if (RealId == tId) {
                        preId = preId + sId + '#';
                    }
                }

                var name = graphic_content[i].Name;
                if (!RealId || RealId == 'undefined') {//RealID不存在，获取id，插入comp

                } else {//Realid存在，更新comp表
                    hdrcom.log.info("RealId is exist, to update");
                    var sqlUpd = 'update ' + hdrcfg.cfg.table_name.T_COMP_INFO + ' set NAME = ?,  PRE_ID = ?, SUF_ID = ? where id = ?';
                    //var strGraphicContent = JSON.stringify(graphic_content[i]);
                    var paramsUpd = [name, preId, sufId, RealId];

                    var rs = hdrcom.db.executeSqlSync(db, sqlUpd, paramsUpd);

                    if (rs.error) {
                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                        hdrcom.log.error(buf);
                        hdrcom.db.rollbackTransactionSync(db);
                        callback(msg);
                        return;
                    }
                }
                //把RealId返回给前端。
                /*
                var RealIdSet = {};
                RealIdSet["cid"] = BlockId;
                RealIdSet["rid"] = RealId;
                RealIdArray.push(RealIdSet);
                */
            }

            callback(null, "SUCCESS");
        }
    ], function (err, result) {
        if (err != null) {
            hdrcom.log.info("err occor.");
            var cs = hdrcom.db.closeDBSync(db);
            hdrcom.pub.processResult(res, err, false, body);
        } else {
            hdrcom.log.info("end success.\n");
            var ct = hdrcom.db.commitTransactionSync(db);
            var cs = hdrcom.db.closeDBSync(db);
            hdrcom.pub.processResult(res, result, true, body);
        }
    });
}


//查询graphic
function require_graphic(body, res) {
    var query_graphic = function () {
        var deferred = Q.defer();
        var group = body.request.group;
        var sql = 'select idx as global_index, line as line_object, content as graphic_content from ' + hdrcfg.cfg.table_name.T_COMP_RELATION + ' where GROUP_ID = ?';
        var params = [group];

        var rs = hdrcom.db.executeSql(mysqlCn, sql, params);

        rs.then(function (data) {
            var graphic = {};
            if (data.length > 0) {
                graphic["graphic"] = data[0];
                deferred.resolve(graphic);
            } else {
                graphic["graphic"] = "";
                deferred.resolve(graphic);
            }

        }, function (err) {
            var buf = err.state + ':' + err.message;
            var msg = {error_code: hdrcfg.code.EDBERROR, error_msg: buf};
            hdrcom.log.error(buf);
            deferred.reject(msg);
        });

        return deferred.promise;
    }

    hdrcom.pub.checkMd5(body)//校验前端报文完整性
        .then(query_graphic)
        .done(function (data) {
            hdrcom.pub.processResult(res, data, true, body);
        }, function (err) {
            hdrcom.pub.processResult(res, err, false, body);
        });
}


var graphic = {
    add_graphic: add_graphic,
    require_graphic: require_graphic
};

//导出对象
module.exports = graphic;