/**
 * Created by on 2016/12/13.
 */
var hdrcom = require('../common');
var hdrcfg = require('../../config');

var md5 = require('md5');
var Q = require("q");
var async = require('async');
var moment = require('moment');

//var mysqlCn = hdrcfg.cfg.mysql_connstr.connstr;
var mysqlCn = hdrcom.pub.getDipMysqlConn();

/*
 * ##############以下为调用transfer相关方法######################
 */
/**
 * @param body
 * @param res
 */
//查询query_qrecv_config
function query_qrecv_config(body, res) {
    var queTsInfo = function () {
        var deferred = Q.defer();

        var grp_id = body.request.group_id;
        var ts_id = body.request.component_id;
        var sql = 'select PARAM_NAME, PARAM_VALUE from ' + hdrcfg.cfg.table_name.T_COMP_PARAM + ' where COMP_ID = ?';
        var params = [ts_id];

        var rs = hdrcom.db.executeSql(mysqlCn, sql, params);

        rs.then(function (data) {
            if (data.length > 0) {
                var resJson = {};
                var passwd = "";
                for (var i = 0; i < data.length; i++) {
                    if (data[i].PARAM_NAME == 'passwd'){
                        resJson[data[i].PARAM_NAME] = data[i].PARAM_VALUE;
                        /*
                        passwd = data[i].PARAM_VALUE;
                        var de_passwd = hdrcom.pub.detdes(passwd); //解密
                        resJson[data[i].PARAM_NAME] = de_passwd;
                        */
                    }else if (data[i].PARAM_NAME == 'encrypt'){
                        if (data[i].PARAM_VALUE == 'SM4')
                            resJson[data[i].PARAM_NAME] = 'yes';
                        else
                            resJson[data[i].PARAM_NAME] = 'no';
                    }else
                        resJson[data[i].PARAM_NAME] = data[i].PARAM_VALUE;
                }
                
                deferred.resolve(resJson);
            } else {
                deferred.resolve(data);
            }
        }, function (err) {
            var buf = err.state + ':' + err.message;
            var msg = {error_code: hdrcfg.code.EDBERROR, error_msg: buf};
            hdrcom.log.error(buf);
            deferred.reject(msg);
        });

        return deferred.promise;
    }

    hdrcom.pub.checkMd5(body)//校验前端报文完整性
        .then(queTsInfo)
        .done(function (data) {
            hdrcom.pub.processResult(res, data, true, body);
        }, function (err) {
            hdrcom.pub.processResult(res, err, false, body);
        });
}
//query_tserver_config
function query_tserver_config(body, res) {
    var queTsConfig = function () {
        var deferred = Q.defer();
        var sql = 'SELECT PARAM_NAME, PARAM_VALUE from ' + hdrcfg.cfg.table_name.T_SERVICE_PARAM + ' WHERE ' +
            'SERVICE_ID = (SELECT ID FROM '+ hdrcfg.cfg.table_name.T_SERVICE_INFO + ' WHERE TYPE = ?)';
        var params = [hdrcfg.cfg.service_type.TSERVER];

        var rs = hdrcom.db.executeSql(mysqlCn, sql, params);

        rs.then(function (data) {
            if (data.length > 0) {
                var resJson = {};
                for (var i = 0; i < data.length; i++) {
                    if (data[i].PARAM_NAME == 'passwd'){
                       var passwd1 = hdrcom.pub.detdes(data[i].PARAM_VALUE);
                        resJson[data[i].PARAM_NAME] = passwd1;
                    }else{
                        resJson[data[i].PARAM_NAME] = data[i].PARAM_VALUE;
                    }
                }

                var jJson = {"server_config":{"user":resJson}};
                deferred.resolve(jJson);
            } else {
                deferred.resolve(data);
            }
        }, function (err) {
            var buf = err.state + ':' + err.message;
            var msg = {error_code: hdrcfg.code.EDBERROR, error_msg: buf};
            hdrcom.log.error(buf);
            deferred.reject(msg);
        });

        return deferred.promise;
    }

    hdrcom.pub.checkMd5(body)//校验前端报文完整性
        .then(queTsConfig)
        .done(function (data) {
            hdrcom.pub.processResult(res, data, true, body);
        }, function (err) {
            hdrcom.pub.processResult(res, err, false, body);
        });
}

//add_tserver_config
function add_tserver_config(body, res) {
    var db = hdrcom.db.openDBSync(mysqlCn);
    if (db.error) {
        var buf = hdrcfg.code.EDBOPEN + ':' + hdrcfg.msg[hdrcfg.code.EDBOPEN];
        var msg = {error_code: hdrcfg.code.EDBOPEN, error_msg: buf};
        hdrcom.log.error(buf);
        hdrcom.pub.processResult(res, msg, false, body);
        return;
    }
    hdrcom.log.info("[add_tserver_config], conn db ok.");

    async.waterfall([
        function (callback) {
            hdrcom.log.info("add_tserver_config check md5...");

            if (body.md5 === md5(JSON.stringify(body.request))) {
                callback(null);
            }
            else {
                var buf = hdrcfg.code.EMD5 + ':' + hdrcfg.msg[hdrcfg.code.EMD5];
                var msg = {error_code: hdrcfg.code.EMD5, error_msg: buf};
                hdrcom.log.error(buf);
                callback(msg);
            }
        },
        function (callback) {//获取id
            //获取tserverid
            var sqlid = 'SELECT ID FROM ' + hdrcfg.cfg.table_name.T_SERVICE_INFO + ' WHERE TYPE = ?';
            var paramsid = [hdrcfg.cfg.service_type.TSERVER];
            var rsid = hdrcom.db.executeSqlSync(db, sqlid, paramsid);

            if (rsid.error) {
                var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                hdrcom.log.error(buf);
                callback(msg);
                return;
            }

            if (rsid.length > 0){
                callback(null, rsid[0].ID);
            }
            else {
                var buf = hdrcfg.code.ENOENT + ':' + 'tserver id ' + hdrcfg.msg[hdrcfg.code.ENOENT];
                var msg = {error_code: hdrcfg.code.ENOENT, error_msg: buf};
                hdrcom.log.error(buf);
                callback(msg);
            }
        },
        function (tsid, callback) {//insert T_COMP_INFO， T_COMP_PARAM
            var insertTS = function (request ,db, time) {

                //遍历body，循环插入T_COMP_PARAM表
                for (var x in request.server_config.user) {
                    var sql = 'insert into ' + hdrcfg.cfg.table_name.T_SERVICE_PARAM + '(SERVICE_ID, PARAM_NAME, PARAM_VALUE, VALID, INSERT_TIME) values (?, ?, ?, ?, ?)';

                    var params = "";
                    if (x == 'passwd'){
                        var crypt_passwd = hdrcom.pub.tdes(request.server_config.user[x]);
                        params = [tsid, x, crypt_passwd, 'YES', time];
                    }else if ( x == 'pri'){
                        params = [tsid, 'all_que', request.server_config.user.pri.all_que, 'YES', time];
                    }else
                        params = [tsid, x, request.server_config.user[x], 'YES', time];

                    var rs = hdrcom.db.executeSqlSync(db, sql, params);

                    if (rs.error) {
                        var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                        var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                        hdrcom.log.error(buf);
                        hdrcom.db.rollbackTransactionSync(db);
                        return false;
                    }
                }
                return true;
            }

            if (!hdrcom.pub.setAutoCommit(db)) {
                var buf = hdrcfg.code.EAUTOCOMMIT + ':' + hdrcfg.msg[hdrcfg.code.EAUTOCOMMIT];
                var msg = {error_code: hdrcfg.code.EAUTOCOMMIT, error_msg: buf};
                hdrcom.log.error(buf);
                callback(msg);
                return;
            }

            var bt = hdrcom.db.beginTransactionSync(db);
            if (bt.error) {
                var buf = hdrcfg.code.EBTRAN + ':' + hdrcfg.msg[hdrcfg.code.EBTRAN];
                var msg = {error_code: hdrcfg.code.EBTRAN, error_msg: buf};
                hdrcom.log.error(buf);
                callback(msg);
                return;
            }
            
            var sql = 'delete from ' + hdrcfg.cfg.table_name.T_SERVICE_PARAM + ' where service_id = ?';
            var params = [tsid];

            var rs = hdrcom.db.executeSqlSync(db, sql, params);

            if (rs.error) {
                var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                hdrcom.log.error(buf);
                hdrcom.db.rollbackTransactionSync(db);
                return false;
            }

            var time = moment().format('YYYY-MM-DD HH:mm:ss');

            //遍历body，循环插入T_COMP_PARAM表
            if (!insertTS(body.request ,db, time)){
                hdrcom.log.error("insert database info error");
                var buf = hdrcfg.code.EDBEXECUTE + ':' + hdrcfg.msg[hdrcfg.code.EDBEXECUTE];
                var msg = {error_code: hdrcfg.code.EDBEXECUTE, error_msg: buf};
                hdrcom.log.error(buf);
                callback(msg);
                return;
            }
            var ct = hdrcom.db.commitTransactionSync(db);
            callback(null, "SUCCESS");
        }
    ], function (err, result) {
        var cs = hdrcom.db.closeDBSync(db);
        if (err != null) {
            hdrcom.pub.processResult(res, err, false, body);
        } else {
            hdrcom.pub.processResult(res, result, true, body);
        }
        hdrcom.log.info("end deal add_tserver_config.\n");
    });
}

var transfer = {
    query_qrecv_config: query_qrecv_config,
    query_tserver_config: query_tserver_config,
    add_tserver_config: add_tserver_config
};

//导出对象
module.exports = transfer;